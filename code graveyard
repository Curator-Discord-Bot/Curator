    # noinspection PyUnreachableCode
    @count.command(aliases=['unfail', 'repair', 'revert'])
    async def restore(self, ctx: commands.Context):
        """Unfail a count.

        For if a count fails due to a bug.
        """
        return await ctx.send('Not working correctly yet.')
        if ctx.author.id in [261156531989512192, 314792415733088260, 183374539743428608,
                             341795028642824192] or await self.bot.is_owner(ctx.author):
            if ctx.channel.id in finished_counts.keys():
                running_counts[ctx.channel.id] = finished_counts[ctx.channel.id]['count']
                count = running_counts[ctx.channel.id]
                connection: asyncpg.pool = self.bot.pool

                for discord_id, contribution in count.contributors.items():
                    async with Counter(await fetch_counter_record(discord_id, connection), connection) as counter:
                        counter.last_count = finished_counts[ctx.channel.id]['last_counts'][counter.user_id]
                        counter.total_score -= contribution
                        counter.counts_participated -= 1
                        counter.best_count = finished_counts[ctx.channel.id]['best_counts'][counter.user_id]
                        if counter.user_id == count.started_by:
                            counter.counts_started -= 1
                        if counter.user_id == count.ruined_by:
                            counter.counts_ruined -= 1
                            counter.best_ruin = finished_counts[ctx.channel.id]['ruiner_best']

                query = 'DELETE FROM counts WHERE id = $1'
                await connection.fetchval(query, count.id)

                await ctx.send('Successful! Sorry for failing, this bug will be fixed soon.')
                await ctx.send(str(count.score))
            else:
                await ctx.send('There is no count data to reset to.')
        else:
            await ctx.send(
                'You cannot use this command, ask someone with the right permissions to use this, if the count failed by a bug.')


async def check_channel(channel: discord.TextChannel, message=False) -> bool:
    if not is_count_channel(channel):
        if message:
            await channel.send(
                'Count commands are intended for use only in channels that contain "count" in the name...')
        return False
    return True